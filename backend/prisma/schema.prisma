// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum ContentType {
  TEXT
  IMAGES
  VIDEOS
  POLLS
}

   

model User {
  id          String      @id @default(uuid())
  email       String?  @unique
  name        String? 
  password    String
  role        String   @default("USER") // "admin", "moderator", "user"
  post       Post[]
  communities UserCommunity[]
  customFeeds CustomFeed[]
}

model Post {
     id   String   @id @default(uuid())
     title  String
     content  String
     contentType    ContentType
     published Boolean   @default(false)
     author    User      @relation(fields: [authorId] , references: [id])
     authorId   String 
     communityId String
     community  Community @relation(fields: [communityId], references: [id])
      flairId       String
      flair         Flair     @relation(fields: [flairId], references: [id])


}

model Community {
  id   String     @id    @default(uuid())
  name   String   @unique
  description String
  ownerId  String 
  flair   Flair[] 
  rules   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  joinRequests Boolean @default(false)
  post      Post[]
  users     UserCommunity[]
  customFeeds CustomFeedCommunity[]
}

model Flair {
  id            String       @id @default(uuid())
  name          String
  communityId   String
  community     Community @relation(fields: [communityId], references: [id])
  posts         Post[]
}

model UserCommunity {
  userId   String
  user   User  @relation(fields: [userId], references: [id])
   communityId String
  community Community @relation(fields: [communityId], references: [id])
  @@id([userId, communityId])
}

model CustomFeed {
  id          String   @id @default(uuid())
  name        String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  communities CustomFeedCommunity[]
}

model CustomFeedCommunity {
  customFeedId String
  customFeed   CustomFeed @relation(fields: [customFeedId], references: [id])
  communityId  String
  community    Community  @relation(fields: [communityId], references: [id])
  addedAt      DateTime   @default(now())
  @@id([customFeedId, communityId])
}



