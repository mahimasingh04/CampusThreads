// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER 
  MODERATOR
  ADMIN
  UNKNOWN @map("UNKNOWN")
}

enum ContentType {
  TEXT
  IMAGES
  VIDEOS
  POLLS
}

enum CollaborationStatus {
  PENDING
  ACCEPTED
  REJECTED
}


enum NotificationType {
  JOIN_REQUEST
  REQUEST_ACCEPTED
  REQUEST_REJECTED
}

model User {
  id          String      @id @default(uuid())
  email       String?     @unique
  bio         String?
  name        String 
  skills      String?
  developerProfileLinks   String?
  college     String?
  password    String
  role        Role        @default(USER) @map("role")
  post        Post[]
  communities UserCommunity[]
  customFeeds CustomFeed[]
  savedPosts  SavedPost[]
  hackathonPosts CollaborationPost[]    @relation("UserPosts")
  comments  Comment[]
  userVisits   communityVisit[]
  moderator  CommunityModerator[]
   createdTags  Tag[]
  notifications  Notification[]
  CollaborationApplicant CollaborationApplicant[]
}

model Post {
     id   String   @id @default(uuid())
     title  String
     content  String
     contentType    ContentType
     published Boolean   @default(false)
     author    User      @relation(fields: [authorId] , references: [id], onDelete: Cascade)
     authorId   String 
     communityId String
     community  Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
     tagId   String
     tag  Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
     savedBy    SavedPost[]
    upvotes  Int    @ default(0)
    downvotes  Int   @ default(0)
    comments  Comment[]
    commentCount  Int  @default(0)
     createdAt  DateTime  @default(now())
     updatedAt  DateTime?  @updatedAt
      isCollaboration Boolean      @default(false)
     collaboration  CollaborationPost?  // 1:1 relation
}

model Community {
  id   String     @id    @default(uuid())
  name   String   @unique 
  description String
  ownerId  String 
  rules   Rules[]
  membersCount Int @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  joinRequests Boolean @default(false)
  post      Post[]
  tags    Tag[] 
  users     UserCommunity[]
  customFeeds CustomFeedCommunity[]
  communityVisits communityVisit[]
  moderators   CommunityModerator[]


  
}

model Rules {
  id     String  @id @default(uuid())
  order Int
  title  String
  description  String
  communityId  String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
}
model Tag {
  id            String     @id @default(uuid())
  name          String
  description   String
  isPublic      Boolean    @default(true)
  accessCode    String?    @unique
  communityId   String
  community     Community  @relation(fields: [communityId], references: [id], onDelete: Cascade)
  createdBy     String
  creator       User       @relation(fields: [createdBy], references: [id])
  posts         Post[]

   @@unique([name, communityId])
    @@unique([id, accessCode]) // Important for validation
  
  // Index for better performance on common queries
  @@index([communityId])
  @@index([isPublic])
}

model UserCommunity {
  userId   String
  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityId String
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  @@id([userId, communityId])
}



model CustomFeed {
  id          String   @id @default(uuid())
  name        String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  communities CustomFeedCommunity[]
}

model CustomFeedCommunity {
  customFeedId String
  customFeed   CustomFeed @relation(fields: [customFeedId], references: [id], onDelete: Cascade)
  communityId  String
  community    Community  @relation(fields: [communityId], references: [id], onDelete: Cascade)
  addedAt      DateTime   @default(now())
  @@id([customFeedId, communityId])
}

model SavedPost {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  savedAt   DateTime @default(now())
  @@unique([userId, postId])
}

model CollaborationPost {
  id              String       @id @default(uuid())
  post            Post         @relation(fields: [postId], references: [id])
  postId          String       @unique
  eventName       String
  eventDate       DateTime
  location        String?
  eventLink       String?
  description     String
  rolesNeeded     RolesNeed[]
  totalSpots      Int
  spotsLeft       Int
  filledSpots     Int          @default(0)
  applicants      CollaborationApplicant[]
  User User[] @relation("UserPosts")
}

model RolesNeed {
  id          Int      @id @default(autoincrement())
  name        String
  collabPost  CollaborationPost? @relation(fields: [collabPostId], references: [id])
  collabPostId String?
}

model CollaborationApplicant {
  id          String        @id @default(uuid())
  collaborationPost  CollaborationPost @relation(fields: [collaborationPostId], references: [id])
  collaborationPostId String
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  status      CollaborationStatus @default(PENDING)
  createdAt   DateTime      @default(now())

  // Ensures one application per user per post
  @@unique([collaborationPostId, userId])
}



model communityVisit {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  communityId String
  community   Community @relation(fields: [communityId], references: [id])
  visitedAt   DateTime @default(now())
  
  @@unique([userId, communityId]) // One visit record per user per community
  @@index([userId])              // Faster querying for user-specific visits
  @@index([visitedAt])           // Optimized for sorting by recency
}

model CommunityModerator {
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityId String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  @@id([userId, communityId])
}

model Comment{
  id String  @id @default(uuid())
  postId  String
  post  Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  user  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  content  String

}

model Notification {
  id           String           @id @default(uuid())
  userId       String
  user         User             @relation(fields: [userId], references: [id])
  type         NotificationType
  content      String
  relatedId    String?  // CollaborationApplicant ID
  isRead       Boolean          @default(false)
  createdAt    DateTime         @default(now())

  @@index([userId])
  @@index([isRead])
}